library ieee;
use ieee.std_logic_1164.all;

entity AddKey is
 port(
	clk: in std_logic;
	state: in std_logic_vector(127 downto 0);
	key: in std_logic_vector(127 downto 0);
	newState: out std_logic_vector(127 downto 0));
end entity AddKey;

architecture rtl of AddKey is
	signal addition : std_logic_vector(127 downto 0);


--------------------------------------------------------------------------------------

	begin 
	clock : process (clk)
		begin
		if (rising_edge(Clock)) then 
			newState <= addition;
		end if;
	end process;

	addition(127 downto 120) <= state(127 downto 120) xor key(127 downto 120);
	addition(119 downto 112) <= state(119 downto 112) xor key(119 downto 112);
	addition(111 downto 104) <= state(111 downto 104) xor key(111 downto 104);
	addition(103 downto 96)  <= state(103 downto 96)  xor key(103 downto 96);
	addition(95  downto 88)  <= state(95  downto 88)  xor key(95  downto 88);
	addition(87  downto 80)  <= state(87  downto 80)  xor key(87  downto 80);
	addition(79  downto 72)  <= state(79  downto 72)  xor key(79  downto 72);
	addition(71  downto 64)  <= state(71  downto 64)  xor key(71  downto 64);
	addition(63  downto 56)  <= state(63  downto 56)  xor key(63  downto 56);
	addition(55  downto 48)  <= state(55  downto 48)  xor key(55  downto 48);
	addition(47  downto 40)  <= state(47  downto 40)  xor key(47  downto 40);
	addition(39  downto 32)  <= state(39  downto 32)  xor key(39  downto 32);
	addition(31  downto 24)  <= state(31  downto 24)  xor key(31  downto 24);
	addition(23  downto 16)  <= state(23  downto 16)  xor key(23  downto 16);
	addition(17  downto 8)   <= state(17  downto 8)   xor key(17  downto 8);
	addition(7   downto 0)   <= state(7   downto 0)   xor key(7   downto 0);
					 
end;





